import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Schema as MongooseSchema, Types } from 'mongoose';

@Schema({ _id: false })
class QuantityThresholdAdjustments {
  @Prop({ type: Number })
  thresholdValue: number;

  @Prop({ type: String })
  comparisonOperator: string;

  @Prop({ type: Number })
  adjustedValue: number;
}

@Schema({ _id: false })
class AllowedQuantitiesByPriceRange {
  @Prop({ type: Number })
  minPrice: number;

  @Prop({ type: Number })
  maxPrice: number;

  @Prop({ type: Number })
  allowedQuantity: number;
}

@Schema({ _id: false })
class StoreAllowedQuantities {
  @Prop({ type: Number })
  quantityOffset: number;

  @Prop({ type: Number })
  maxQuantityLimitEnabled: number;

  @Prop({ type: Number })
  maxAllowedQuantity: number;

  @Prop({ type: [QuantityThresholdAdjustments] })
  quantityThresholdAdjustments: QuantityThresholdAdjustments[];

  @Prop({ type: [AllowedQuantitiesByPriceRange] })
  quantitiesByPriceRange: AllowedQuantitiesByPriceRange[];
}

@Schema({ _id: false })
class ApiOAuthToken {
  @Prop({ type: Object })
  accessToken: any;

  @Prop({ type: Date })
  accessTokenUpdatedDate: Date;

  @Prop({ type: Object })
  applicationAccessToken: any;

  @Prop({ type: Date })
  applicationAccessTokenUpdatedDate: Date;

  @Prop({ type: Object })
  refreshToken: any;

  @Prop({ type: Boolean })
  refreshTokenValid: boolean;

  @Prop({ type: Date })
  refreshTokenUpdatedDate: Date;

  @Prop({ type: String, enum: ['autoGenerated', 'manual'] })
  source: string;
}

@Schema({ _id: false })
class SourcingSetup {
  @Prop({
    type: [
      {
        supplierId: { type: Types.ObjectId, ref: 'SupplierConfig' },
        priority: Number,
      },
    ],
  })
  supplierSourcingPriority: { supplierId: Types.ObjectId; priority: number }[];

  @Prop({
    type: [
      {
        supplierId: { type: Types.ObjectId, ref: 'SupplierConfig' },
        priceOffsetTolerance: {
          value: Number,
          percentage: Boolean,
        },
        stockAvailabilityFallback: Boolean,
      },
    ],
  })
  supplierTolerance: any[];

  @Prop({
    type: [
      {
        supplierId: { type: Types.ObjectId, ref: 'SupplierConfig' },
        quantityOffset: {
          value: Number,
          percentage: Boolean,
        },
        defaultMaxQuantityLimitEnabled: Boolean,
        defaultMaxQuantityLimit: Number,
        quantityThresholdAdjustments: [QuantityThresholdAdjustments],
        quantitiesByPriceRange: [AllowedQuantitiesByPriceRange],
      },
    ],
  })
  quantitySetup: any[];
}

@Schema({ timestamps: true })
export class StoreConfig extends Document {
  @Prop({ type: String, enum: ['ebay', 'amazon'] })
  storeMarketplace: string;

  @Prop({ type: String })
  storeName: string;

  @Prop({ type: String })
  storeUsername: string;

  @Prop({ type: String })
  storeEmail: string;

  @Prop({ type: Object })
  storePassword: any;

  @Prop({ type: [{ type: Types.ObjectId, ref: 'SupplierConfig' }] })
  supplierIds: Types.ObjectId[];

  @Prop({
    type: [
      {
        supplierId: { type: Types.ObjectId, ref: 'SupplierConfig' },
        markUpPercent: Number,
      },
    ],
  })
  supplierMarkUps: any[];

  @Prop({ type: Boolean })
  syncSwitch: boolean;

  @Prop({
    type: {
      switch: Boolean,
      specifiedItemIds: Boolean,
      itemIds: [Object],
    },
  })
  fetch: any;

  @Prop({ type: String })
  storeRedirectUri: string;

  @Prop({ type: Number })
  storeShipStationId: number;

  @Prop({ type: StoreAllowedQuantities })
  storeAllowedQuantities: StoreAllowedQuantities;

  @Prop({ type: ApiOAuthToken })
  apiOAuthToken: ApiOAuthToken;

  @Prop({ type: SourcingSetup })
  sourcingSetup: SourcingSetup;

  @Prop({
    type: {
      optimalPricingWindow: {
        minimumSellerAllowedPricePercent: Number,
        maximumSellerAllowedPricePercent: Number,
      },
      sellerId: String,
      marketplaceId: String,
      issueLocale: String,
    },
  })
  marketplaceOptions: any;

  @Prop({
    type: {
      ebayCommissionPercent: Number,
      minimumProfitPercent: Number,
    },
  })
  analyzerConfig: any;

  @Prop({ type: Boolean })
  listingDescriptionTemplate: boolean;
}

export const StoreConfigSchema = SchemaFactory.createForClass(StoreConfig);